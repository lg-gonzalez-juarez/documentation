I"t8<h2 id="111-the-if-and-else-statements">11.1. The <code class="language-plaintext highlighter-rouge">if</code> and <code class="language-plaintext highlighter-rouge">else</code> Statements</h2>

<p>Up to this point, all of the code that we’ve written will always execute sequentially regardless of the inputs that we provide (assuming that we don’t cause an error). In this lesson, we’re going to learn about conditionals. Conditionals allow us to add branching logic to our code, and take different actions based on conditions.</p>

<h3 id="documentation">Documentation</h3>

<ul>
  <li><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">The if and else Statements</a></li>
</ul>

<h3 id="the-if-and-else-statements">The if and else Statements</h3>

<p>With a grasp on comparisons, we can now look at how to use conditionals to run different pieces of logic based on values. The main keywords for conditionals in Python are if and else. Conditionals are the first language feature we’re using that require us to utilize whitespace to separate our code blocks. We will always use 4 spaces as indentation. The basic shape of an if statement is this:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">if</span><span class="w"> </span><span class="n">CONDITION:</span><span class="w">
    </span><span class="nx">print</span><span class="p">(</span><span class="s2">"CONDITION was True"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>The CONDITION portion can be anything that evaluates to True or False, and if the value isn’t explicitly a boolean then it will be implicitly converted to determine how to proceed past the conditional (essentially wrapping the CONDITION with the bool constructor):</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="n">True:</span><span class="w">
</span><span class="o">...</span><span class="w">     </span><span class="nx">print</span><span class="p">(</span><span class="s2">"Was True"</span><span class="p">)</span><span class="w">
</span><span class="o">...</span><span class="w">
</span><span class="n">Was</span><span class="w"> </span><span class="nx">True</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="n">False:</span><span class="w">
</span><span class="o">...</span><span class="w">     </span><span class="nx">print</span><span class="p">(</span><span class="s2">"Was True"</span><span class="p">)</span><span class="w">
</span><span class="o">...</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w">
</span></code></pre></div></div>

<p>To add an alternative code path, we’ll use the else keyword, followed by a colon (:), and indent the code underneath:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="n">False:</span><span class="w">
</span><span class="o">...</span><span class="w">     </span><span class="nx">print</span><span class="p">(</span><span class="s2">"Was True"</span><span class="p">)</span><span class="w">
</span><span class="o">...</span><span class="w"> </span><span class="kr">else</span><span class="p">:</span><span class="w">
</span><span class="o">...</span><span class="w">     </span><span class="n">print</span><span class="p">(</span><span class="s2">"Was False"</span><span class="p">)</span><span class="w">
</span><span class="o">...</span><span class="w">
</span><span class="n">Was</span><span class="w"> </span><span class="nx">False</span><span class="w">
</span></code></pre></div></div>

<h2 id="112-handling-multiple-cases-with-elif">11.2. Handling Multiple Cases with <code class="language-plaintext highlighter-rouge">elif</code></h2>

<p>Being able to perform one thing or another based on a condition is useful. But there are many situations where we want to check multiple possible conditions, and have more than two possible branches. In this lesson, we’ll learn about how we can use the elif statement to have multiple branching paths in our conditionals.</p>

<h3 id="documentation-1">Documentation</h3>

<p>-<a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">The if, elif, and else Statements</a></p>

<h3 id="the-elif-statement">The elif Statement</h3>

<p>When we want our programs to have more than two possible outputs, then the elif statement will work perfectly for us. The elif statement looks a lot like the if statement:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">if</span><span class="w"> </span><span class="n">CONDITION:</span><span class="w">
   </span><span class="c"># do something</span><span class="w">
</span><span class="n">elif</span><span class="w"> </span><span class="nx">CONDITION_2:</span><span class="w">
   </span><span class="c"># do a different thing</span><span class="w">
</span><span class="kr">else</span><span class="p">:</span><span class="w">
   </span><span class="c"># do something if all conditions are False</span><span class="w">
</span></code></pre></div></div>

<p>We can chain as many elif statements together as we need, so the number of cases that we can handle is effectively limitless. Let’s put elif to use by creating a script to evaluate the length of a name provided when we run the script:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">learning-conditionals.py</span><span class="w">

</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">input</span><span class="p">(</span><span class="s2">"What is your name? "</span><span class="p">)</span><span class="w">
</span><span class="kr">if</span><span class="w"> </span><span class="n">len</span><span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="w"> </span><span class="err">&gt;</span><span class="o">=</span><span class="w"> </span><span class="mi">6</span><span class="p">:</span><span class="w">
   </span><span class="n">print</span><span class="p">(</span><span class="s2">"Your name is long."</span><span class="p">)</span><span class="w">
</span><span class="n">elif</span><span class="w"> </span><span class="nx">len</span><span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">5</span><span class="p">:</span><span class="w">
   </span><span class="n">print</span><span class="p">(</span><span class="s2">"Your name is 5 characters."</span><span class="p">)</span><span class="w">
</span><span class="n">elif</span><span class="w"> </span><span class="nx">len</span><span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="w"> </span><span class="err">&gt;</span><span class="o">=</span><span class="w"> </span><span class="mi">4</span><span class="p">:</span><span class="w">
   </span><span class="n">print</span><span class="p">(</span><span class="s2">"Your name is 4 or more characters."</span><span class="p">)</span><span class="w">
</span><span class="kr">else</span><span class="p">:</span><span class="w">
   </span><span class="n">print</span><span class="p">(</span><span class="s2">"Your name is short."</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>When we run this, we can see the various results:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span><span class="w"> </span><span class="n">python3.7</span><span class="w"> </span><span class="nx">learning-conditionals.py</span><span class="w">
</span><span class="n">What</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">your</span><span class="w"> </span><span class="nx">name</span><span class="nf">?</span><span class="w"> </span><span class="nx">Keith</span><span class="w">
</span><span class="nx">Your</span><span class="w"> </span><span class="nx">name</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">5</span><span class="w"> </span><span class="nx">characters.</span><span class="w">
</span><span class="err">$</span><span class="w"> </span><span class="n">python3.7</span><span class="w"> </span><span class="nx">learning-conditionals.py</span><span class="w">
</span><span class="n">What</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">your</span><span class="w"> </span><span class="nx">name</span><span class="nf">?</span><span class="w"> </span><span class="nx">Alex</span><span class="w">
</span><span class="nx">Your</span><span class="w"> </span><span class="nx">name</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">4</span><span class="w"> </span><span class="nx">or</span><span class="w"> </span><span class="nx">more</span><span class="w"> </span><span class="nx">characters.</span><span class="w">
</span><span class="err">$</span><span class="w"> </span><span class="n">python3.7</span><span class="w"> </span><span class="nx">learning-conditionals.py</span><span class="w">
</span><span class="n">What</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">your</span><span class="w"> </span><span class="nx">name</span><span class="nf">?</span><span class="w"> </span><span class="nx">Alex</span><span class="w">
</span><span class="nx">Your</span><span class="w"> </span><span class="nx">name</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">4</span><span class="w"> </span><span class="nx">or</span><span class="w"> </span><span class="nx">more</span><span class="w"> </span><span class="nx">characters.</span><span class="w">
</span><span class="err">$</span><span class="w"> </span><span class="n">python3.7</span><span class="w"> </span><span class="nx">learning-conditionals.py</span><span class="w">
</span><span class="n">What</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">your</span><span class="w"> </span><span class="nx">name</span><span class="nf">?</span><span class="w"> </span><span class="nx">Bob</span><span class="w">
</span><span class="nx">Your</span><span class="w"> </span><span class="nx">name</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">short.</span><span class="w">
</span><span class="err">$</span><span class="w"> </span><span class="n">python3.7</span><span class="w"> </span><span class="nx">learning-conditionals.py</span><span class="w">
</span><span class="n">What</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">your</span><span class="w"> </span><span class="nx">name</span><span class="nf">?</span><span class="w"> </span><span class="nx">Cynthia</span><span class="w">
</span><span class="nx">Your</span><span class="w"> </span><span class="nx">name</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">long.</span><span class="w">
</span></code></pre></div></div>

<p>Notice that we fell into the first elif statement’s block, and then the second elif block was never executed even though it was true. We can only exercise one branch in an if statement.</p>

<h2 id="113-utilizing-pass">11.3. Utilizing <code class="language-plaintext highlighter-rouge">pass</code></h2>

<p>Occasionally, we want to add a branch or other code block without providing any useful code in the block. This is a useful approach if we’re outlining some code. In this lesson, we’ll learn how to achieve this by using the pass statement.</p>

<h3 id="documentation-2">Documentation</h3>

<p><a href="https://docs.python.org/3/reference/simple_stmts.html?highlight=pass#the-pass-statement">The pass Statement</a></p>

<h3 id="the-pass-statement">The pass Statement</h3>

<p>When we’re first working through a conditional, it’s good to handle all cases, even if we don’t have an else case that we’d like to run. This is good practice, just to ensure that we’re thinking about the whole problem. We can remove it later.</p>

<p>To add an else statement without a body, we’ll place a pass statement within. The pass statement is what is known as a null operation. Absolutely nothing happens when we execute a pass statement, but they are useful as a code placeholder:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Keith"</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"Kevin"</span><span class="p">:</span><span class="w">
</span><span class="o">...</span><span class="w">     </span><span class="n">print</span><span class="p">(</span><span class="s2">"Hello Kevin"</span><span class="p">)</span><span class="w">
</span><span class="o">...</span><span class="w"> </span><span class="kr">else</span><span class="p">:</span><span class="w">
</span><span class="o">...</span><span class="w">     </span><span class="n">pass</span><span class="w">
</span><span class="o">...</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w">
</span></code></pre></div></div>

<p>There are other types of code contexts with Python such as functions, classes, and loops. In all of these, we’re able to leverage pass if we want to create the context and not do anything.</p>
:ET