I"£&<h2 id="ruby-and-rubygems">Ruby and RubyGems</h2>

<p>Ruby and <a href="https://rubygems.org/pages/download">RubyGems</a> are usually installed by default on Macs. Open your Terminal and type <code class="language-plaintext highlighter-rouge">which ruby</code> and  <code class="language-plaintext highlighter-rouge">which gem</code> to confirm that you have Ruby and Rubygems. You should get a response indicating the location of Ruby and Rubygems.</p>

<p>If you get responses that look like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/local/bin/ruby
</code></pre></div></div>

<p>and</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/local/bin/gem
</code></pre></div></div>

<p>Great! Skip down to the <a href="#bundler">Bundler</a> section.</p>

<p>However, if your location is something like <code class="language-plaintext highlighter-rouge">/Users/MacBookPro/.rvm/rubies/ruby-2.2.1/bin/gem</code>, which points to your system location of Rubygems, you will likely run into permissions errors when trying to get a gem. A sample permissions error (triggered when you try to install the jekyll gem such as <code class="language-plaintext highlighter-rouge">gem install jekyll</code>) might look like this for Rubygems:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> &gt;ERROR:  While executing gem ... (Gem::FilePermissionError)
  You don't have write permissions for the /Library/Ruby/Gems/2.0.0 directory.
</code></pre></div></div>

<p>Instead of changing the write permissions on your operating system‚Äôs version of Ruby and Rubygems (which could pose security issues), you can install another instance of Ruby (one that is writable) to get around this.</p>

<h2 id="install-homebrew">Install Homebrew</h2>

<p>Homebrew is a package manager for the Mac, and you can use it to install an alternative instance of Ruby code. To install Homebrew, run this command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</code></pre></div></div>

<p>If you already had Homebrew installed on your computer, be sure to update it:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew update
</code></pre></div></div>

<h2 id="install-ruby-through-homebrew">Install Ruby through Homebrew</h2>

<p>Now use Homebrew to install Ruby:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install ruby
</code></pre></div></div>

<p>Log out of terminal, and then then log back in.</p>

<p>When you type <code class="language-plaintext highlighter-rouge">which ruby</code> and <code class="language-plaintext highlighter-rouge">which gem</code>, you should get responses like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/local/bin/ruby
</code></pre></div></div>

<p>And this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/local/bin/gem
</code></pre></div></div>

<p>Now Ruby and Rubygems are installed under your username, so these directories are writeable.</p>

<p>Note that if you don‚Äôt see these paths, try restarting your computer or try installing rbenv, which is a Ruby version management tool. If you still have issues getting a writeable version of Ruby, you need to resolve them before installing Bundler.</p>

<h2 id="bundler">Install the Jekyll gem</h2>

<p>At this point you should have a writeable version of Ruby and Rubygem on your machine.</p>

<p>Now use <code class="language-plaintext highlighter-rouge">gem</code> to install Jekyll:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install jekyll
</code></pre></div></div>

<p>You can now use Jekyll to create new Jekyll sites following the quick-start instructions on <a href="http://jekyllrb.com">Jekyllrb.com</a>.</p>

<h2 id="installing-dependencies-through-bundler">Installing dependencies through Bundler</h2>

<p>Some Jekyll themes will require certain Ruby gem dependencies. These dependencies are stored in something called a Gemfile, which is packaged with the Jekyll theme. You can install these dependencies through Bundler. (Although you don‚Äôt need to install Bundler for this Documentation theme, it‚Äôs a good idea to do so.)</p>

<p><a href="http://bundler.io/">Bundler</a> is a package manager for RubyGems. You can use it to get all the gems (or Ruby plugins) that you need for your Jekyll project.</p>

<p>You install Bundler by using the gem command with RubyGems:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install bundler
</code></pre></div></div>

<p>If you‚Äôre prompted to switch to superuser mode (<code class="language-plaintext highlighter-rouge">sudo</code>) to get the correct permissions to install Bundler in that directory, avoid doing this. All other applications that need to use Bundler will likely not have the needed permissions to run.</p>

<p>Bundler goes out and retreives all the gems that are specified in a Jekyll project‚Äôs Gemfile. If you have a gem that depends on other gems to work, Bundler will go out and retrieve all of the dependencies as well. (To learn more about Bundler, see <a href="mydoc_about_ruby_gems_etc.html">About Ruby Gems</a>.</p>

<p>The vanilla Jekyll site you create through <code class="language-plaintext highlighter-rouge">jekyll new my-awesome-site</code> doesn‚Äôt have a Gemfile, but many other themes (including the Documentation theme for Jekyll) do have a Gemfile.</p>

<h2 id="serve-the-jekyll-documentation-theme">Serve the Jekyll Documentation theme</h2>

<ol>
  <li>Browse to the directory where you downloaded the Documentation theme for Jekyll.</li>
  <li>Type <code class="language-plaintext highlighter-rouge">jekyll serve</code></li>
  <li>Go to the preview address in the browser. (Make sure you include the <code class="language-plaintext highlighter-rouge">/</code> at the end.)</li>
</ol>

<h2 id="githuberror">Resolve ‚ÄúNo Github API authentication‚Äù errors</h2>

<p>After making an edit, Jekyll auto-rebuilds the site. If you have the Gemfile in the theme with the github-pages gem, you may see the following error:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GitHub Metadata: No GitHub API authentication could be found. Some fields may be missing or have incorrect data.
</code></pre></div></div>

<p>If you see this error, you will need to take some additional steps to resolve it. (Note that this error only appears if you have the github-pages gem in your gemfile.) The resolution involves adding a Github token and a cert file.</p>

<div class="alert alert-info" role="alert"><i class="fa fa-info-circle"></i> <b>Note:</b> These instructions apply to Mac OS X, but they‚Äôre highly similar to Windows. These instructions are adapted from a post on <a href="http://knightcodes.com/miscellaneous/2016/09/13/fix-github-metadata-error.html">Knight Codes</a>. If you‚Äôre on Windows, see the Knight Codes post for details instead of following along below.</div>

<p>To resolve the ‚ÄúNo Github API authentication‚Äù error:</p>

<ol>
  <li>Follow Github‚Äôs instructions to <a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use/">create a personal access token</a>.</li>
  <li>
    <p>Open the <strong>.bash_profile</strong> file in your user directory:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>open ~/.bash_profile
</code></pre></div>    </div>

    <p>The file will open in your default terminal editor. If you don‚Äôt have a .bash_profile file, you can just create a file with this name. Note that files that begin with <code class="language-plaintext highlighter-rouge">.</code> are hidden, so if you‚Äôre looking in your user directory for the file, use <code class="language-plaintext highlighter-rouge">ls -a</code> to see hidden files.</p>
  </li>
  <li>
    <p>In your <strong>.bash_profile</strong> file, reference your token as a system variable like this:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export JEKYLL_GITHUB_TOKEN=abc123abc123abc123abc123abc123abc123abc123abc123
</code></pre></div>    </div>

    <p>Replace <code class="language-plaintext highlighter-rouge">abc123...</code> with your own token that you generated in step 1.</p>
  </li>
  <li>Go to <strong>[https://curl.haxx.se/ca/cacert.pem][https://curl.haxx.se/ca/cacert.pem]. Right-click the page, select **Save as</strong>, and save the file on your computer (save it somewhere safe, where you won‚Äôt delete it). Name the file <strong>cacert</strong>.</li>
  <li>
    <p>Open your <strong>.bash_profile</strong> file again and add this line, replacing <code class="language-plaintext highlighter-rouge">Users/johndoe/projects/</code> with the path to your cacert.pem file:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export SSL_CERT_FILE=/Users/johndoe/projects/cacert.pem
</code></pre></div>    </div>
  </li>
  <li>Close and restart your terminal.</li>
</ol>

<p>Browse to your jekyll project and run <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code>. Make an edit to a file and observe that no Github API errors appear when Jekyll rebuilds the project.</p>

<p>[]:</p>

:ET