I"0<h2 id="about-liquid-and-conditional-statements">About Liquid and conditional statements</h2>
<p>If you want to create different outputs for different audiences, you can do all of this using a combination of Jekyll’s Liquid markup and values in your configuration file. This is how I previously configured the theme. I had different configuration files for each output. Each configuration file specified different values for product, audience, version, and so on. Then I had different build processes that would leverage the different configuration files. It seemed like a perfect implementation of DITA-like techniques with Jekyll.</p>

<p>But I soon found that having lots of separate outputs for a project was undesirable. If you have 10 different outputs that have different nuances for different audiences, it’s hard to manage and maintain. In this latest version of the theme, I consolidated all information into the same output to explicitly do away with the multi-output approach.</p>

<p>As such, the conditional logic won’t have as much play as it previously did. Instead of conditions, you’ll probably want to incorporate <a href="mydoc_navtabs">navtabs</a> to split up the information.</p>

<p>However, you can still of course use conditional logic as needed.</p>

<div class="alert alert-success" role="alert"><i class="fa fa-check-square-o"></i> <b>Tip:</b> Definitely check out <a href="http://docs.shopify.com/themes/liquid-documentation/basics">Liquid’s documentation</a> for more details about how to use operators and other liquid markup. The notes here are a small, somewhat superficial sample from the site.</div>

<h2 id="where-to-store-filtering-values">Where to store filtering values</h2>

<p>You can filter content based on values that you have set either in your page’s frontmatter, a config file, or in a file in your _data folder. If you set the attribute in your config file, you need to restart the Jekyll server to see the changes. If you set the value in a file in your _data folder or page frontmatter, you don’t need to restart the server when you make changes.</p>

<h2 id="conditional-logic-based-on-config-file-value">Conditional logic based on config file value</h2>

<p>Here’s an example of conditional logic based on a value in the page’s frontmatter. Suppose you have the following in your frontmatter:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>platform: mac
</code></pre></div></div>

<p>On a page in my site (it can be HTML or markdown), you can conditionalize content using the following:</p>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">platform</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"mac"</span><span class="w"> </span><span class="p">%}</span>
Here's some info about the Mac.
<span class="p">{%</span><span class="w"> </span><span class="kr">elsif</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">platform</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"windows"</span><span class="w"> </span><span class="p">%}</span>
Here's some info about Windows ...
<span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
</code></pre></div></div>

<p>This uses simple <code class="language-plaintext highlighter-rouge">if-elsif</code> logic to determine what is shown (note the spelling of <code class="language-plaintext highlighter-rouge">elsif</code>). The <code class="language-plaintext highlighter-rouge">else</code> statement handles all other conditions not handled by the <code class="language-plaintext highlighter-rouge">if</code> statements.</p>

<p>Here’s an example of <code class="language-plaintext highlighter-rouge">if-else</code> logic inside a list:</p>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code>To bake a casserole:

1. Gather the ingredients.
<span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">audience</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"writer"</span><span class="w"> </span><span class="p">%}</span>
2. Add in a pound of meat.
<span class="p">{%</span><span class="w"> </span><span class="kr">elsif</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">audience</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"designer"</span><span class="w"> </span><span class="p">%}</span>
3. Add in an extra can of beans.
<span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
3. Bake in oven for 45 min.
</code></pre></div></div>

<p>You don’t need the <code class="language-plaintext highlighter-rouge">elsif</code> or <code class="language-plaintext highlighter-rouge">else</code>. You could just use an <code class="language-plaintext highlighter-rouge">if</code> (but be sure to close it with <code class="language-plaintext highlighter-rouge">endif</code>).</p>

<h2 id="or-operator">Or operator</h2>

<p>You can use more advanced Liquid markup for conditional logic, such as an <code class="language-plaintext highlighter-rouge">or</code> command. See <a href="http://docs.shopify.com/themes/liquid-documentation/basics/operators">Shopify’s Liquid documentation</a> for more details.</p>

<p>For example, here’s an example using <code class="language-plaintext highlighter-rouge">or</code>:</p>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">audience</span><span class="w"> </span><span class="ow">contains</span><span class="w"> </span><span class="s2">"vegan"</span><span class="w"> </span><span class="ow">or</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">audience</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"vegetarian"</span><span class="w"> </span><span class="p">%}</span>
    Then run this...
<span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
</code></pre></div></div>

<p>Note that you have to specify the full condition each time. You can’t shorten the above logic to the following:</p>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">audience</span><span class="w"> </span><span class="ow">contains</span><span class="w"> </span><span class="s2">"vegan"</span><span class="w"> </span><span class="ow">or</span><span class="w"> </span><span class="s2">"vegetarian"</span><span class="w"> </span><span class="p">%}</span>
    // run this.
<span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
</code></pre></div></div>

<p>This won’t work.</p>

<h2 id="unless-operator">Unless operator</h2>

<p>You can also use <code class="language-plaintext highlighter-rouge">unless</code> in your logic, like this:</p>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{%</span><span class="w"> </span><span class="kr">unless</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">output</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"pdf"</span><span class="w"> </span><span class="p">%}</span>
...do this
<span class="p">{%</span><span class="w"> </span><span class="kr">endunless</span><span class="w"> </span><span class="p">%}</span>
</code></pre></div></div>

<p>When figuring out this logic, read it like this: “Run the code here <em>unless</em> this condition is satisfied.”.”</p>

<p>Don’t read it the other way around or you’ll get confused. (It’s <em>not</em> executing the code only if the condition is satisfied.)</p>

<h2 id="storing-conditions-in-the-_data-folder">Storing conditions in the _data folder</h2>

<p>Here’s an example of using conditional logic based on a value in a data file:</p>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">data</span><span class="p">.</span><span class="nv">options</span><span class="p">.</span><span class="nv">output</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"alpha"</span><span class="w"> </span><span class="p">%}</span>
show this content...
<span class="p">{%</span><span class="w"> </span><span class="kr">elsif</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">data</span><span class="p">.</span><span class="nv">options</span><span class="p">.</span><span class="nv">output</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"beta"</span><span class="w"> </span><span class="p">%}</span>
show this content...
<span class="p">{%</span><span class="w"> </span><span class="kr">else</span><span class="w"> </span><span class="p">%}</span>
this shows if neither of the above two if conditions are met.
<span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
</code></pre></div></div>

<p>To use this, I would need to have a _data folder called options where the <code class="language-plaintext highlighter-rouge">output</code> property is stored.</p>

<h2 id="specifying-the-location-for-_data">Specifying the location for _data</h2>

<p>You can also specify a <code class="language-plaintext highlighter-rouge">data_source</code> for your data location in your configuration file. Then you aren’t limited to simply using <code class="language-plaintext highlighter-rouge">_data</code> to store your data files.</p>

<p>For example, suppose you have 2 projects: alpha and beta. You might store all the data files for alpha inside data_alpha, and all the data files for beta inside data_beta.</p>

<p>In your alpha configuration file, specify the data source like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>data_source: data_alpha
</code></pre></div></div>

<p>Then create a folder called _data_alpha.</p>

<p>For your beta configuration file, specify the data source like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>data_source: data_beta
</code></pre></div></div>

<p>Then create a folder called _data_beta.</p>

<h2 id="conditions-versus-includes">Conditions versus includes</h2>

<p>If you have a lot of conditions in your text, it can get confusing. As a best practice, whenever you insert an <code class="language-plaintext highlighter-rouge">if</code> condition, add the <code class="language-plaintext highlighter-rouge">endif</code> at the same time. This will reduce the chances of forgetting to close the if statement. Jekyll won’t build if there are problems with the liquid logic.</p>

<p>If your text is getting busy with a lot of conditional statements, consider putting a lot of content into includes so that you can more easily see where the conditions begin and end.</p>

<p>[]:</p>

:ET