I"π|<h2 id="41-unary-and-bitwise-operators">4.1. Unary and Bitwise Operators</h2>

<p>Before we start using the types that we‚Äôve learned to write larger scripts with, we‚Äôre going to want to know about the operators that we have access to. In this lesson, we‚Äôll be defining unary and bitwise operators.</p>

<h3 id="documentation">Documentation</h3>

<ul>
  <li><a href="https://wiki.python.org/moin/BitwiseOperators">Python Bitwise Operator Documentation</a></li>
  <li><a href="https://docs.python.org/3/library/operator.html#mapping-operators-to-functions">Python Operators</a></li>
</ul>

<h3 id="what-is-a-unary-operator">What is a Unary Operator?</h3>

<p>A unary operator is an operator that only has one operand. Where the + operation is a binary operator, because we need to provide an operand to the right and left of the operator, a unary operator only takes a right-side operand.</p>

<h3 id="what-are-bitwise-operators">What are Bitwise Operators?</h3>

<p>Bitwise operators are operators that work off of the bit information (binary notation) for numbers. These aren‚Äôt used that often, but it‚Äôs good to have an understanding of what they do.</p>

<p>Positions in binary numbers are known as ‚Äúbits‚Äù and they can either be 0 or 1. Bitwise operations do various things based on the values of these bits.</p>

<h3 id="a-brief-aside-about-truth-tables">A Brief Aside About Truth Tables</h3>

<p>One tool from logic (from philosophy) that is used at every level of computer science is the idea of truth tables. Truth tables describe how various operations in boolean algebra work, and can show us all of the available options. Bitwise operators are boolean algebra operations because they deal with 0 and 1, which will equate to false and true. We won‚Äôt go too deep into truth tables, but if you‚Äôd like to have a better understanding of boolean logic then I would encourage you to research them.</p>

<h3 id="operators-bitwise-complement">Operators: Bitwise Complement</h3>

<p>The first bitwise operator that we‚Äôre going to talk about is probably the most confusing one: the bitwise complement operator <code class="language-plaintext highlighter-rouge">~</code>. This is the only unary operator that we‚Äôre going to talk about in this lesson. It takes a number that we‚Äôre going to call x, and returns the result of <code class="language-plaintext highlighter-rouge">-x - 1</code>. To show what this looks like in binary we‚Äôll also use the <code class="language-plaintext highlighter-rouge">bin</code> function to show our integers as binary numbers:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="n">b010</span><span class="w">
</span><span class="nx">2</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="n">bin</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="w">
</span><span class="s1">'0b10'</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="n">~a</span><span class="w">
</span><span class="nt">-3</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="n">bin</span><span class="p">(</span><span class="n">~a</span><span class="p">)</span><span class="w">
</span><span class="s1">'-0b11'</span><span class="w">
</span></code></pre></div></div>

<h3 id="bitwise-or">Bitwise OR</h3>

<p>The remainder of the bitwise operators make a lot more sense and require two numbers as the operands. The bitwise OR operation will take two numbers, and if one of them has a 1 in a bit position then it will return a 1 at that position in the final result. To use the bitwise OR we‚Äôll use a single pipe characters <code class="language-plaintext highlighter-rouge">|</code>:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="n">b1001</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="n">b1100</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">bin</span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">b</span><span class="p">)</span><span class="w">
</span><span class="s1">'0b1101'</span><span class="w">
</span></code></pre></div></div>

<h3 id="bitwise-and">Bitwise AND</h3>

<p>Where bitwise OR will return a 1 for a bit position if that position is a 1 in either number, bitwise AND requires that both have a 1 at that position, otherwise it will have a 0 at that position in the final result. The bitwise AND operator is a single ampersand &amp;:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="n">b1001</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="n">b1100</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">bin</span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="nx">b</span><span class="p">)</span><span class="w">
</span><span class="s1">'0b1000'</span><span class="w">
</span></code></pre></div></div>

<h3 id="bitwise-xor">Bitwise XOR</h3>

<p>Bitwise XOR (exclusive or) is an interesting operator where the position in the final result will have a 1 if exactly one of the operands has a 1 in that position. The bitwise XOR operator is a caret ^:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="n">b1001</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="n">b1100</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">bin</span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="err">^</span><span class="w"> </span><span class="nx">b</span><span class="p">)</span><span class="w">
</span><span class="s1">'0b101'</span><span class="w">
</span></code></pre></div></div>

<h3 id="bitwise-right-shift">Bitwise Right Shift</h3>

<p>The final two operators allow us to shift our bit values directly sideways by a certain number of positions. To shift our bits to the right we‚Äôll use the bitwise right shift operator which is¬†¬ª. Our initial values are on the left-hand side and the number of positions to shift is on the right:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="n">b110</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">bin</span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="err">&gt;&gt;</span><span class="w"> </span><span class="nx">2</span><span class="p">)</span><span class="w">
</span><span class="s1">'0b1'</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="n">bin</span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="err">&gt;&gt;</span><span class="w"> </span><span class="nx">4</span><span class="p">)</span><span class="w">
</span><span class="s1">'0b0'</span><span class="w">
</span></code></pre></div></div>

<p>Notice that if we shift beyond the number of bits in our number then we simply get 0 as the result.</p>

<h3 id="bitwise-left-shift">Bitwise Left Shift</h3>

<p>Bitwise left shift uses the ¬´¬†operator with the same rules as the right shift operator. For each position that we shift then we‚Äôll add a new 0 bit to the right.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="n">b110</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">bin</span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="err">&lt;&lt;</span><span class="w"> </span><span class="nx">2</span><span class="p">)</span><span class="w">
</span><span class="s1">'0b11000'</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="n">bin</span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="err">&lt;&lt;</span><span class="w"> </span><span class="nx">4</span><span class="p">)</span><span class="w">
</span><span class="s1">'0b1100000''
</span></code></pre></div></div>
<h2 id="42-boolean-operators">4.2 Boolean Operators</h2>

<p>Believe it or not, now that we understand bitwise operators we‚Äôve learned the basics of doing boolean logic. We‚Äôre in a great spot to learn about boolean operators.</p>

<h3 id="python-documentation">Python Documentation:</h3>

<p><a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not">Boolean Operators</a></p>

<h3 id="the-not-operation">The not Operation</h3>

<p>Sometimes we want to know the opposite boolean value for something. To do this, we use the unary operators <code class="language-plaintext highlighter-rouge">not</code>:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="n">not</span><span class="w"> </span><span class="nx">True</span><span class="w">
</span><span class="n">False</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">not</span><span class="w"> </span><span class="nx">False</span><span class="w">
</span><span class="n">True</span><span class="w">
</span></code></pre></div></div>

<h3 id="the-or-operation">The or Operation</h3>

<p>The boolean <code class="language-plaintext highlighter-rouge">or</code> operator works the same way that the bitwise OR operator did if we are only considering one bit. The bit of <code class="language-plaintext highlighter-rouge">1</code> is equivalent to <code class="language-plaintext highlighter-rouge">True</code> and <code class="language-plaintext highlighter-rouge">0</code> is equivalent to <code class="language-plaintext highlighter-rouge">False</code></p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="n">True</span><span class="w"> </span><span class="nx">or</span><span class="w"> </span><span class="nx">True</span><span class="w">
</span><span class="n">True</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">True</span><span class="w"> </span><span class="nx">or</span><span class="w"> </span><span class="nx">False</span><span class="w">
</span><span class="n">True</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">False</span><span class="w"> </span><span class="nx">or</span><span class="w"> </span><span class="nx">False</span><span class="w">
</span><span class="n">False</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">False</span><span class="w"> </span><span class="nx">or</span><span class="w"> </span><span class="nx">True</span><span class="w">
</span><span class="n">True</span><span class="w">
</span></code></pre></div></div>

<h3 id="the-and-operation">The and Operation</h3>

<p>The <code class="language-plaintext highlighter-rouge">and</code> operator is the opposite of <code class="language-plaintext highlighter-rouge">or</code>, and both of the operands need to be true.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="n">True</span><span class="w"> </span><span class="nx">and</span><span class="w"> </span><span class="nx">True</span><span class="w">
</span><span class="n">True</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">True</span><span class="w"> </span><span class="nx">and</span><span class="w"> </span><span class="nx">False</span><span class="w">
</span><span class="n">False</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">False</span><span class="w"> </span><span class="nx">and</span><span class="w"> </span><span class="nx">False</span><span class="w">
</span><span class="n">False</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">False</span><span class="w"> </span><span class="nx">and</span><span class="w"> </span><span class="nx">True</span><span class="w">
</span><span class="n">False</span><span class="w">
</span></code></pre></div></div>

<h2 id="43-comparison-operators">4.3. Comparison Operators</h2>

<p>The last operators that we need to learn about are the comparison operators. These operators allow us to know if two items are equivalent, or if one is great than the other.</p>

<h3 id="documentation-1">Documentation</h3>

<ul>
  <li><a href="https://docs.python.org/3/library/stdtypes.html#comparisons">Comparisons</a></li>
  <li><a href="https://docs.python.org/3/library/functions.html#ord">The ord function</a></li>
</ul>

<h3 id="he-greater-than-and-less-than-operators">he Greater Than and Less Than Operators</h3>

<p>We‚Äôre going to work our way through the comparison operators by starting with the ones that will feel most familiar from mathematics. The four greater than and less than operators work exactly as you‚Äôd expect:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="err">&lt;</span><span class="w"> </span><span class="mi">2</span><span class="w">
</span><span class="n">True</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">2</span><span class="w"> </span><span class="err">&gt;</span><span class="w"> </span><span class="nx">1</span><span class="w">
</span><span class="n">True</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">2</span><span class="w"> </span><span class="err">&lt;</span><span class="w"> </span><span class="nx">1</span><span class="w">
</span><span class="n">False</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">1</span><span class="w"> </span><span class="err">&lt;</span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="n">True</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">2.0</span><span class="w"> </span><span class="err">&gt;</span><span class="o">=</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span><span class="n">False</span><span class="w">
</span></code></pre></div></div>

<p>A few things to note are that we can compare numeric types to one other, so it‚Äôs not hard to compare floats with integers.</p>

<p>Another thing to notice is that these comparison operators always return a boolean value.</p>

<p>Remember that individual types dictate whether or not they work with specific operands. And strings, for instance, work with these comparison operators too:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="s1">'a'</span><span class="w"> </span><span class="err">&gt;</span><span class="w"> </span><span class="s1">'b'</span><span class="w">
</span><span class="n">False</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="s1">'b'</span><span class="w"> </span><span class="err">&gt;</span><span class="w"> </span><span class="s1">'a'</span><span class="w">
</span><span class="n">True</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="s1">'bb'</span><span class="w"> </span><span class="err">&gt;</span><span class="o">=</span><span class="w"> </span><span class="s1">'ba'</span><span class="w">
</span><span class="n">True</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="s1">'a'</span><span class="w"> </span><span class="err">&lt;</span><span class="o">=</span><span class="w"> </span><span class="s1">'c'</span><span class="w">
</span><span class="n">True</span><span class="w">
</span></code></pre></div></div>

<p>When comparing strings, each character is compared with the character at the same index in the other string to determine which one is larger. Behind the scenes, each character as a numeric value that we can find using the [ord] function, and these are used to do the comparisons.</p>

<p>Once again, if we try to compare types that aren‚Äôt comparable, then we‚Äôll receive an error indicating such:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="s1">'a'</span><span class="w"> </span><span class="err">&lt;</span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="n">Traceback</span><span class="w"> </span><span class="p">(</span><span class="n">most</span><span class="w"> </span><span class="nx">recent</span><span class="w"> </span><span class="nx">call</span><span class="w"> </span><span class="nx">last</span><span class="p">):</span><span class="w">
  </span><span class="n">File</span><span class="w"> </span><span class="s2">"&lt;stdin&gt;"</span><span class="p">,</span><span class="w"> </span><span class="nx">line</span><span class="w"> </span><span class="nx">1</span><span class="p">,</span><span class="w"> </span><span class="nx">in</span><span class="w"> </span><span class="err">&lt;</span><span class="nx">module</span><span class="err">&gt;</span><span class="w">
</span><span class="n">TypeError:</span><span class="w"> </span><span class="s1">'&lt;='</span><span class="w"> </span><span class="nx">not</span><span class="w"> </span><span class="nx">supported</span><span class="w"> </span><span class="nx">between</span><span class="w"> </span><span class="nx">instances</span><span class="w"> </span><span class="nx">of</span><span class="w"> </span><span class="s1">'str'</span><span class="w"> </span><span class="nx">and</span><span class="w"> </span><span class="s1">'int'</span><span class="w">
</span></code></pre></div></div>

<h3 id="the-equals-operators">The Equals Operators</h3>

<p>The equals operators are a little different than you might expect, because we already use a single equals sign for variable assignment operations. Because of this, to see if two things are equal we use a double equals sign ==:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="n">True</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">1.0</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="n">True</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">2</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mf">1.0</span><span class="w">
</span><span class="n">False</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="s1">'a'</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">2</span><span class="w">
</span><span class="n">False</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="s1">'a'</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'a'</span><span class="w">
</span><span class="n">True</span><span class="w">
</span></code></pre></div></div>

<p>Notice that this checks equivalence, so comparing an equivalent float and integer will return True. Additionally, we‚Äôre able to compare two completely different types without receiving an error because they‚Äôre not equivalent.</p>

<p>If we want to know if two objects aren‚Äôt equivalent, then we can use the not equal operators !=. This will return True only if the items aren‚Äôt equivalent:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="n">False</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">1.0</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="n">False</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">2</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mf">1.0</span><span class="w">
</span><span class="n">True</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="s1">'a'</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">2</span><span class="w">
</span><span class="n">True</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="s1">'a'</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s1">'a'</span><span class="w">
</span><span class="n">False</span><span class="w">
</span></code></pre></div></div>

<h3 id="the-identity-operators">The Identity Operators</h3>

<p>If we want to know if two objects are or are not exactly the same object, then we can use the identity operators. The identity operator is the keyword is and the opposite is is not (with a space).</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="n">is</span><span class="w"> </span><span class="nx">1</span><span class="w">
</span><span class="n">True</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="nx">1</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">1.0</span><span class="w">
</span><span class="n">False</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="s1">'a'</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="s1">'a'</span><span class="w">
</span><span class="n">True</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="s1">'a'</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">not</span><span class="w"> </span><span class="s1">'b'</span><span class="w">
</span><span class="n">True</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="s1">'a'</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">not</span><span class="w"> </span><span class="s1">'a'</span><span class="w">
</span><span class="n">False</span><span class="w">
</span></code></pre></div></div>

<p>The identity operators work based on the id of the object, and most of the basic types in Python are immutable (meaning they cannot be changed), so every time that we reference a specific literal it will point to the same item in memory. We can check the id of an object by using the id function (your return values will be different):</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="n">id</span><span class="p">(</span><span class="s1">'a'</span><span class="p">)</span><span class="w">
</span><span class="mi">4444195248</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="n">id</span><span class="p">(</span><span class="s1">'a'</span><span class="p">)</span><span class="w">
</span><span class="mi">4444195248</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="n">id</span><span class="p">(</span><span class="s1">'a'</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">id</span><span class="p">(</span><span class="s1">'a'</span><span class="p">)</span><span class="w">
</span><span class="n">True</span><span class="w">
</span></code></pre></div></div>

<p>We‚Äôll discuss immutability later, but not all objects are immutable, so you‚Äôll run into situations where you can compare two objects that look the same using is and have False returned. Here are two list literals (which aren‚Äôt immutable):</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="p">[]</span><span class="w"> </span><span class="n">is</span><span class="w"> </span><span class="p">[]</span><span class="w">
</span><span class="n">False</span><span class="w">
</span></code></pre></div></div>

<h2 id="44-operator-priority-binding">4.4. Operator Priority (Binding)</h2>

<p>Now that we‚Äôve learned about quite a few operators, we‚Äôre ready to learn how Python determines the order to run them if there are multiple in a single expression.</p>

<h3 id="documentation-2">Documentation</h3>

<ul>
  <li><a href="https://docs.python.org/3/reference/expressions.html#operator-precedence">Operator precedence</a></li>
</ul>

<h3 id="operator-precedence">Operator Precedence</h3>

<p>In mathematics, we have the order of operations that tell us how we‚Äôre going perform our calculations, and in Python, we have operator precedence. We haven‚Äôt covered all of the contents of this table just yet, but we can look at how everything that we have used so far will be processed.</p>

<p>For whatever reason, the Python documentation shows the least binding operators first, but we‚Äôll talk about them from most binding to least. We‚Äôll leave the ones that we won‚Äôt cover in this course out of the list though:</p>

<ul>
  <li>Parenthesis and List/Dictionary/Set literals</li>
  <li>Accessing attributes (subscription, slicing, function/method call, attribute reference)</li>
  <li>Exponentiation (**)</li>
  <li>Positive, Negative, and bitwise complement</li>
  <li>Multiplication *, Division /, Floor Division //, Modulo %</li>
  <li>Addition +, Subtraction -</li>
  <li>Bitwise Shifts ¬´¬†&amp;¬†¬ª</li>
  <li>Bitwise AND &amp;</li>
  <li>Bitwise XOR ^</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Bitwise OR</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>Comparison operators (in, not in, is, is not, &lt;, &gt;, &lt;=, &gt;=, ==, !=)</li>
  <li>Boolean NOT not</li>
  <li>Boolean AND and</li>
  <li>Boolean OR or</li>
  <li>Conditions if</li>
</ul>

<p>Let‚Äôs look at some examples:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="mi">14</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">4</span><span class="w">
</span><span class="mi">10</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="mi">14</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="mi">2</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">4</span><span class="p">)</span><span class="w">
</span><span class="mi">2</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="p">(</span><span class="mi">14</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">3</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">4</span><span class="w">
</span><span class="mi">8</span><span class="w">
</span><span class="err">&gt;&gt;&gt;</span><span class="w"> </span><span class="mi">14</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="p">(</span><span class="mi">3</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">4</span><span class="w">
</span><span class="mi">10</span><span class="w">
</span></code></pre></div></div>
:ET